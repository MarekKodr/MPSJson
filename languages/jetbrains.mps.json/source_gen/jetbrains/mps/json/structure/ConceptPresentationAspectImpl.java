package jetbrains.mps.json.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_JsonArray;
  private ConceptPresentation props_JsonBool;
  private ConceptPresentation props_JsonDocument;
  private ConceptPresentation props_JsonFile;
  private ConceptPresentation props_JsonInteger;
  private ConceptPresentation props_JsonNull;
  private ConceptPresentation props_JsonObject;
  private ConceptPresentation props_JsonString;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.JsonArray:
        if (props_JsonArray == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_JsonArray = cpb.create();
        }
        return props_JsonArray;
      case LanguageConceptSwitch.JsonBool:
        if (props_JsonBool == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("JsonBool");
          props_JsonBool = cpb.create();
        }
        return props_JsonBool;
      case LanguageConceptSwitch.JsonDocument:
        if (props_JsonDocument == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("json document");
          props_JsonDocument = cpb.create();
        }
        return props_JsonDocument;
      case LanguageConceptSwitch.JsonFile:
        if (props_JsonFile == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("json file");
          props_JsonFile = cpb.create();
        }
        return props_JsonFile;
      case LanguageConceptSwitch.JsonInteger:
        if (props_JsonInteger == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_JsonInteger = cpb.create();
        }
        return props_JsonInteger;
      case LanguageConceptSwitch.JsonNull:
        if (props_JsonNull == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("JsonNull");
          props_JsonNull = cpb.create();
        }
        return props_JsonNull;
      case LanguageConceptSwitch.JsonObject:
        if (props_JsonObject == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_JsonObject = cpb.create();
        }
        return props_JsonObject;
      case LanguageConceptSwitch.JsonString:
        if (props_JsonString == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_JsonString = cpb.create();
        }
        return props_JsonString;
    }
    return null;
  }
}
